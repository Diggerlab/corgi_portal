require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
describe Corgi::V1::UsersController, :type => :controller  do
  render_views
  

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.

  context 'can not create user' do
    it 'can not create with nil' do
       expect {
         @user = create(:user, email: '', password: '')
       }.to raise_error  
    end

    it 'can not create with wrong email' do
      expect {
        @user = create(:user, email: '1233.com')
      }.to raise_error
     
    end
    
    it 'create with the wrong password' do
      expect {
        @user = create(:user, password: "111")
      }.to raise_error
    end
    it 'create with the same email' do
      @user = create(:user)
      expect {
        post :create, :use_route => :Corgi, email: @user.email, password: @user.password, format: :json
        response.code.should_not be_ok
      }.to raise_error
    end
  end 

  context 'create user with success' do
    it 'create user success' do
      post :create, :use_route => :Corgi, email: 'test@test.com', password: 'qqqqqqq', format: :json
      response.code.should eq '200' 
    end

    it 'create user generator authentication_token' do
      post :create, :use_route => :Corgi, email: 'test@test.com', password: 'qqqqqqq', format: :json
      JSON.parse(response.body)["user"]["authentication_token"].should_not be_nil
    end

    it 'create user generator user_state' do
      post :create, :use_route => :Corgi, email: 'test@test.com', password: 'qqqqqqq', format: :json
      JSON.parse(response.body)["user"]["state"].should == 'pending'
    end
  end

  context 'change password' do
    it 'the old password is wrong' do
      expect {
        @user = create(:user)
        post :update_password, :use_route => :Corgi, token: @user.authentication_token, password: "222222"
        response.should_not be_ok
      }.to raise_error 
    end

    it 'the new password is not right' do
      expect {
        @user = create(:user)
        post :update_password, :use_route => :Corgi, token: @user.authentication_token, password: '111111', new_password: '222'
        response.should_not be_ok
      }.to raise_error
    end

    it 'the Verification Code is wrong' do
      expect {
          @user = create(:user)
        post :update_password, :use_route => :Corgi, token: @user.authentication_token, password: '111111', new_password: '222222', captcha: '1122'
        response.should_not be_ok
      }.to raise_error
    end

    it 'change password success' do
      @user = create(:user)
      post :update_password, use_route: :Corgi, token: @user.authentication_token, password: '111111', new_password: '222222', captcha: '1122'
       response.should be_ok
    end

  end

end
